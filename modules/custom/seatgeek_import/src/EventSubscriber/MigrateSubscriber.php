<?php

/* 
 * @file
 *	Subscribes to Migrate's POST_IMPORT event
 */

namespace Drupal\seatgeek_import\EventSubscriber;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Drupal\migrate\Event\MigrateImportEvent;
use Drupal\node\Entity\Node;

class MigrateSubscriber implements EventSubscriberInterface {
  
  public static function getSubscribedEvents() {
	
    $events = [];
	//$events['migrate.post_import'][] = array('migratePostImport');
    return $events;	
  }
  
  /**
   * Updates Event node's run date after performances migration is completed
   * 
   * @param MigrateImportEvent $event
   *  The migration event
   */
  public function migratePostImport(MigrateImportEvent $event) {
	
	$migration = $event->getMigration()->id();
	
	// Make sure we only run this after all performances are imported
	if ($migration == 'seatgeek_performance') {	
	  // Get all event NIDs
	  $events = db_query("SELECT nid FROM node WHERE type='event'")->fetchAll();
	  foreach ($events as $data) {
        $nids[] = $data->nid; 
	  }

	  // Fetch all performances per event
	  foreach ($nids as $event_id) {
		$performances = db_query("SELECT p.id, d.field_perf_date_value FROM performances p INNER JOIN performances__field_event e ON p.id = e.entity_id INNER JOIN performances__field_perf_date d ON e.entity_id = d.entity_id WHERE e.field_event_target_id = :id ORDER BY d.field_perf_date_value DESC", [':id' => $event_id])->fetchAll();
		if (!empty($performances)) {
		  // Load event node
		  $node = Node::load($event_id);
		  // Set run date values
		  $field_run_date = array(
			'value' =>  array_values(array_slice($performances, -1))[0]->field_perf_date_value,
			'end_value' =>  $performances[0]->field_perf_date_value
		  );
		  $node->field_run_date = $field_run_date;

		  // Look up performances referencing this event
		  $query = \Drupal::entityQuery('performances');
		  $query->condition('field_event.target_id', $node->id());
		  $ids = $query->execute();

		  // Set URL if multiple perfs
		  if (count($ids) >= 2) {			
			// Pass on regex'd booking link
			$booking_url = $node->field_event_booking->getValue()[0]['uri'];
			$series_id = $node->field_seatgeek_event_id->getValue()[0]['value'];
			$node->field_event_booking->uri = preg_replace('/\b\d{5,}\b/', $series_id, $booking_url);
		  }
		  
		  // Save event node
		  $node->save();
		}	  
	  }
	}  
  }
}



