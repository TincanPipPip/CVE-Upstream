<?php

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;

/**
 * @file
 * 	Hook implementations
 */
function seatgeek_import_theme() {
  return array(
      'seatgeek_import_calendar' => array(
          'template' => 'seatgeek_import_calendar',
          'variables' => []
      )
  );
}

/**
 * Hook_preprocess_node()
 */
function seatgeek_import_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->type->entity->id() == 'event') {

    // Set this to false by default
    $multiple = FALSE;
    $variables['multiple_perf'] = FALSE;

    // Look up performances referencing this event
    $query = \Drupal::entityQuery('performances');
    $query->condition('field_event.target_id', $node->id());
    $ids = $query->execute();

    // Set var if multiple perfs
    if (count($ids) >= 2) {
      $multiple = TRUE;
      $variables['multiple_perf'] = TRUE;
    }

    // Seatgeek events
    if (!empty($node->get('field_seatgeek_event_id')->getValue())) {
      if ($multiple) { // Multiple performances - display modal
        $variables['booking_link'] = array(
            '#type' => 'link',
            '#title' => !empty($node->get('field_booking_label')->getValue()) ? $node->get('field_booking_label')->getString() : t('Book Now'),
            '#url' => Url::fromRoute('seatgeek_import.calendar_modal', array('prod_id' => $node->get('field_seatgeek_event_id')->getValue()[0]['value'])),
            '#attributes' => array(
                'class' => array('use-ajax', 'a-btn'),
                'data-dialog-type' => 'modal',
                'data-dialog-options' => json_encode(array('height' => '70%', 'width' => '80%')),
            ),
        );
      } else { // Single performance - return booking link
        
        if ($ids) {
          $perf = entity_load('performances', array_pop($ids));
          
          if ($perf) {
            
            $btnClasses = 'a-btn';
            
            if (!empty($perf->field_availability)) {
              $availabilityTerm = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($perf->field_availability->getValue()[0]['target_id']);
              if ($availabilityTerm) {
                $availability = $availabilityTerm->getName();
              }
            }
            
            if ($perf->field_sold_out->getValue()) {
              if ($perf->field_sold_out->getValue()[0]['value'] == '1') {
                $btnClasses = 'a-btn no-click';
                $availability = 'Sold Out';
              }
            }
            
            $variables['booking_link'] = array(
              '#type' => 'link',
              '#title' => !empty($node->get('field_booking_label')->getValue()) ? $node->get('field_booking_label')->getString() : ($availability) ? $availability : 'Book now',
              '#url' => Url::fromUri($perf->field_perf_booking_link->getString()),
              '#attributes' => array(
                'class' => array($btnClasses),
              )  
            );
            
            if (isset($perf->field_do_time) && !empty($perf->field_do_time->getValue())) {        
              $do_time = $perf->field_do_time->getValue()[0]['value'];
            }
          }
        }
      }
    }
    // Manually created events
    else {
      if (!empty($node->field_event_booking->getValue())) {
        $variables['booking_link'] = array(
          '#type' => 'link',
          '#title' => $node->field_booking_label->getString(),
          '#url' => Url::fromUri($node->field_event_booking->getString()),
          '#attributes' => array(
            'class' => array('a-btn'),
          )
        );
      }
      else {
        $variables['booking_link'] = array(
          '#markup' =>   '<a href="#" class="a-btn no-click" target="_self">'. $node->field_booking_label->getString() .'</a>' 
        );  
      }
    }   

    // Hide run date on past events
    $variables['pastEvent'] = FALSE;
    $run_date = $variables['node']->field_run_date->getValue()[0]['end_value'];
    $to_date = strtotime($run_date);
    if (strtotime('now') >= $to_date) {
      $variables['pastEvent'] = TRUE;
    }

    // Pass on Timezone-aware time
    $start_date = $variables['node']->field_run_date->start_date;
    $end_date = $variables['node']->field_run_date->end_date;
    
    // Check for right time format
    $start_format = 'qh_date';
//    $round = date('i', $start_date->getTimestamp());
//    if ($round != '00') {
//      $start_format = 'lc_time_minutes';
//    }    
    if ($start_date) {
      $st_time = \Drupal::service('date.formatter')->format($start_date->getTimestamp(), $start_format);

      // Check for right time format
      $end_format = 'qh_date';
  //    $round = date('i', $end_date->getTimestamp());
  //    if ($round != '00') {
  //      $end_format = 'lc_time_minutes';
  //    }  
      $en_time = \Drupal::service('date.formatter')->format($end_date->getTimestamp(), $end_format);

      // See if start and end are the same
      if ($st_time == $en_time) {
        $variables['at_time'] = $st_time.' '.t('Multiple times');;
      }
      else {
         $variables['at_time'] = $st_time.'-'.$en_time;
      }
    }
    
    //$variables['at_date'] = \Drupal::service('date.formatter')->format($start_date->getTimestamp(), 'qh_date');
   // $variables['startdate'] = \Drupal::service('date.formatter')->format($start_date->getTimestamp(), 'qh_dm');
    //$variables['enddate'] = \Drupal::service('date.formatter')->format($end_date->getTimestamp(), 'qh_dm');
    //$variables['year'] = \Drupal::service('date.formatter')->format($end_date->getTimestamp(), 'qh_y');
  //  $variables['day'] = \Drupal::service('date.formatter')->format($start_date->getTimestamp(), 'qh_day');
//    if (isset($do_time)) {
//      $variables['do_time'] = $do_time == '' ? 'AT ' . $variables['at_time'] : 'DOORS ' . $do_time;
//    }

    $variables['singleperfdate'] = \Drupal::service('date.formatter')->format($start_date->getTimestamp(), 'single_perf_date');
    $variables['singleperfdatenotime'] = \Drupal::service('date.formatter')->format($start_date->getTimestamp(), 'single_perf_date_notime');
    // $variables['singleperftime'] = \Drupal::service('date.formatter')->format($start_date->getTimestamp(), 'single_perf_time');
  }   
}

/**
 * Implements hook_form_alter()
 */
function seatgeek_import_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Remove rollback option from migrate UI
  if ($form_id == 'migration_execute_form') {    
	unset($form['operation']['#options']['rollback']);
  }
}

/**
 * hook_page_attachments_alter()
 */
function seatgeek_import_page_attachments_alter(&$page){
  $page['#attached']['library'][] = 'core/drupal.ajax';
}

/**
 * Preprocess entity
 */
function seatgeek_import_preprocess_eck_entity(&$vars) {  
  if (isset($vars['elements']['#extra_content']) && is_object($vars['elements']['#extra_content'])) {    
	if ($vars['elements']['#extra_content']->bundle() == 'donation' || $vars['elements']['#extra_content']->bundle() == 'seatgeek_donation') {      
      $vars['seatgeek_client'] = \Drupal::config('seatgeek_import.settings')->get('seatgeek_import_client');
	  $vars['fund_id'] = $vars['elements']['#extra_content']->field_fund->getString();
	}
  }
}

/* 
 * Cron hook callback
 */
function seatgeek_import_cron_import() {
  
  $migration_ids = [
    'seatgeek_event',
    'seatgeek_performance'
  ];
  
  foreach ($migration_ids as $migration_id) {  
    $migration = \Drupal::service('plugin.manager.migration')->createInstance($migration_id);
    $migration->getIdMap()->prepareUpdate(); // Set update flag
    $executable = new MigrateExecutable($migration, new MigrateMessage());
    // Stop, reset, import
    $migration->interruptMigration(MigrationInterface::RESULT_STOPPED);
    $migration->setStatus(MigrationInterface::STATUS_IDLE);
    $executable->import();
  }
  
}