import Cookies from 'js-cookie';
const moment = require('moment');
const Lightpick = require('lightpick');

const filtersContainer = document.querySelector('.m-filters');

if (filtersContainer) {
  const filterBtnsIE = document.querySelectorAll('.m-filters__btn'),
    filterBtns = [].slice.call(filterBtnsIE),
    body = document.body,
    defaultView = document.querySelector('.default');

  // Toggle buttons
  function turnOffOtherButtons(overlayBtn) {
    overlayBtn.setAttribute('data-open', 'false');
  }

  // Close open overlays
  function hideAllOverlays() {
    const openOverlaysIHateIE = document.querySelectorAll('[data-visible="true"]'),
      openOverlays = [].slice.call(openOverlaysIHateIE);

    openOverlays.forEach(function(item) {
      item.setAttribute('data-visible', 'false');
    });

    if (body.getAttribute('data-filters', 'show')) {
      body.setAttribute('data-filters', 'hide');
    }
  }

  // Open overlay
  function openOverlay(btn) {
    btn.addEventListener('click', function(e) {
      hideAllOverlays();

      // If clicking an active button
      if (btn.getAttribute('data-open') === 'true') {
        // Turn off active button
        btn.setAttribute('data-open', 'false');
        body.setAttribute('data-filters', 'hide');
      } else {
        // Turn off other buttons and turn on clicked button
        filterBtns.forEach(turnOffOtherButtons);
        toggleState(btn, 'open', 'true', 'false');

        // Set targeted overlay to be open
        const target = document.querySelectorAll(`[data-name="${btn.getAttribute('data-target')}"]`);

        target[0].setAttribute('data-visible', 'true');

        body.setAttribute('data-filters', 'show');
      }
    });
  }

  filterBtns.forEach(openOverlay);

  function resetOverlays() {
    hideAllOverlays();

    body.setAttribute('data-filters', 'hide');

    const activeBtn = document.querySelector('.m-filters__btn[data-state=open]');
    if (activeBtn) {
      activeBtn.setAttribute('data-open', 'false');
    }
  }

  // Close overlays on 'Esc' keypress
  document.onkeydown = function(evt) {
    evt = evt || window.event;
    if (evt.keyCode == 27) {
      resetOverlays();
    }
  };
}

/**
 * Date picker
 */
const datePicker = document.getElementById('datePicker');

if (datePicker) {
  const submitPicker = document.getElementById('submitPicker');

  // When date selected
  submitPicker.addEventListener('click', function(e) {
    const target = e.target.getAttribute('data-target');

    // Avoid invalid date ranges for single click submissions
    let dateRange = datePicker.value;

    // Set cookie for using as View title (see wo-by-date.js)
    Cookies.set('datepicker', dateRange);

    // Load WO view
    // Check if user has already filtered by genre
    const urlParams = new URLSearchParams(window.location.search),
      genreParam = urlParams.get('genre');

    if (genreParam) {
      dateRange = `${dateRange}&genre=${genreParam}`;
    }

    window.location.href = target + dateRange;
  });

  function dateSelect(e) {
    submitPicker.classList.add('active');
  }

  // Init date picker
  const picker = new Lightpick({
    field: datePicker,
    lang: 'en',
    singleDate: false,
    numberOfMonths: 1,
    inline: true,
    format: 'YYYYMMDD',
    separator: '--',
    minDate: new Date(),
    dropdowns: {
      years: {
        min: new Date().getFullYear(),
        max: new Date().getFullYear() + 5,
      },
      months: true,
    },
    hoveringTooltip: false,
    onSelect: dateSelect,
    weekdayStyle: 'narrow',
  });

  /**
   * Choose a date links
   */

  const dateLinks = document.getElementById('dateLinks').querySelectorAll('button');

  if (dateLinks) {
    dateLinks.forEach(function(dateLink) {
      dateLink.addEventListener('click', function() {
        const datetype = dateLink.getAttribute('data-date');
        switch (datetype) {
          case 'week':
            picker.setDateRange(
              moment().format('YYYYMMDD'),
              moment()
                .add(7, 'days')
                .format('YYYYMMDD')
            );
            break;
          case 'month':
            picker.setDateRange(
              moment().format('YYYYMMDD'),
              moment()
                .add(31, 'days')
                .format('YYYYMMDD')
            );
            break;
          case 'tomorrow':
            picker.setDateRange(
              moment()
                .add(1, 'days')
                .format('YYYYMMDD'),
              moment()
                .add(1, 'days')
                .format('YYYYMMDD')
            );
            break;
          case 'today':
            picker.setDateRange(moment().format('YYYYMMDD'), moment().format('YYYYMMDD'));
        }

        submitPicker.click();
      });
    });
  }

  /**
   * What's on by date title replace
   */
  const titleToReplace = document.querySelector('h1');

  if (titleToReplace) {
    // Get date value from cookie and convert to a nice format for display
    if (Cookies.get('datepicker')) {
      const dates = Cookies.get('datepicker').split('--');
      let niceDate;

      // If only a single date selected
      if (dates[0] === dates[1]) {
        niceDate = moment(dates[0], 'YYYYMMDD').format('D MMM YYYY');
      } else {
        niceDate = `${moment(dates[0], 'YYYYMMDD').format('D MMM')} - ${moment(dates[1], 'YYYYMMDD').format('D MMM YYYY')}`;
      }

      titleToReplace.innerHTML = `What's On ${niceDate}`;

      // Set existing date search on calendar
      picker.setDateRange(dates[0], dates[1]);
    }
    // Clear cookie
    Cookies.remove('datepicker');
  }
}

/**
 * See all button
 */
const seeAllBtn = document.querySelector('.m-filters__all');

if (window.location.search != '') {
  seeAllBtn.setAttribute('data-show', 'true');
}
