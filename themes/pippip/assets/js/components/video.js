import Enquire from 'enquire.js'

class Video {
  constructor(elem, options) {
    this.elem = elem
    this.domElem = document.querySelector(this.elem)
    this.config = Video.extendDefaultSettings(Video.defaults(), options)
    this.control = document.querySelector(this.config.control)

    if (this.isElement(this.domElem) && this.isElement(this.control)) {
      this.init()
    }
  }

  static extendDefaultSettings(defaults, settings) {
    for (const key in settings) {
      if (settings.hasOwnProperty(key)) {
        defaults[key] = settings[key]
      }
    }

    return defaults
  }

  static defaults() {
    return {
      control: '.a-video-control',
      cssClass: {
        play: 'a-video-control--play',
        pause: 'a-video-control--pause',
      },
    }
  }

  isElement(domElem) {
    return domElem instanceof HTMLElement
  }

  init() {
    window.addEventListener('DOMContentLoaded', () => {
      this.registerEvents()
      this.initEnquire()
    })
  }

  registerEvents() {
    this.control.addEventListener(
      'click',
      this.onToggleVideo.bind(this, this.domElem)
    )

    this.domElem.addEventListener(
      'playing',
      this.onStateChange.bind(this, this.control, this.config)
    )

    this.domElem.addEventListener(
      'pause',
      this.onStateChange.bind(this, this.control, this.config)
    )
  }

  onStateChange(control, { cssClass }, e) {
    e.preventDefault()

    if (this.isVideoPlaying(e.target)) {
      control.classList.add(cssClass.pause)
      control.classList.remove(cssClass.play)
    } else {
      control.classList.add(cssClass.play)
      control.classList.remove(cssClass.pause)
    }
  }

  onToggleVideo(video, e) {
    e.preventDefault()

    if (this.isVideoPlaying(video)) {
      video.pause()
    } else {
      video.play()
    }
  }

  isVideoPlaying(video) {
    return !!(!video.paused && !video.ended && video.readyState > 2)
  }

  initEnquire() {
    Enquire.register(`screen and (min-width: 768px) and (min-height: 576px)`, {
      match: () => {
        this.domElem.play()
      },
      unmatch: () => {
        this.domElem.pause()
      },
      deferSetup: false,
    })
  }
}

export default Video
